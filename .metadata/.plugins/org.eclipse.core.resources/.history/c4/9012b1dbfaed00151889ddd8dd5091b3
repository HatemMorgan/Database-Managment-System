package Database2Project;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilePermission;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectInputStream.GetField;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.io.Serializable;
import java.nio.Buffer;
import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.net.URL;

import javax.print.attribute.standard.MediaSize.Other;
import javax.xml.crypto.dsig.keyinfo.PGPData;

import BTree.BTree;



public class Table implements Serializable {
	Hashtable<String, String> fTblColNameType;
	Hashtable<String, String> fTblColNameRefs;
	Hashtable<String, String> fTblColIndexPath;
	String TableName;
	String Key;
	ArrayList<String> TablePagesPath;
	int pageNumber ;
	String WorkSpacePath = System.getProperty("user.dir") ;
	static int count = 0;
	 int MaximumRowsCountinPage ;
	
	
	public Table(Hashtable<String, String> fTblColNameType,Hashtable<String, String> fTblColNameRefs,String TableName,String Key ) throws IOException{
		
		 String row="" ;
         File f1 = new File("DBApp.config");
         FileReader fr = new FileReader(f1);
         Properties p1 = new Properties();
         p1.load(fr);
          MaximumRowsCountinPage = Integer.parseInt(p1.getProperty("MaximumRowsCountinPage"));
         fr.close();
		
		
		this.fTblColNameType = fTblColNameType;
		this.fTblColNameRefs = fTblColNameRefs;
		this.fTblColIndexPath = new Hashtable<String,String>();
		this.TableName = TableName;
		this.Key = Key;
		TablePagesPath = new ArrayList<String>();
		pageNumber = 0;
	
	
	}
	
	
	
	public int CreateNewPage() throws FileNotFoundException, IOException{
		pageNumber++;
	    Page page = new Page(TableName);
	    Hashtable<String, Object> pageHeaders = new Hashtable<String, Object>();
	    
	    Set<String> keys = fTblColNameType.keySet();
	    Iterator<String> iterator = keys.iterator();
	    
	    while(iterator.hasNext()){
	    	
	    	String columnName = iterator.next();
	    	pageHeaders.put(columnName, "");
	    	
	    }
pageHeaders.put("Touch_Date", "");
	    
	    page.Rows.add(pageHeaders);
	    
	    
	    String FolderPath = WorkSpacePath+"/Classes/Hatem 31-4562 Omar 31-5039/"+this.TableName+"/Page"+pageNumber+".class";
	 
	    serializePage(FolderPath, page);
    	
    	
    	TablePagesPath.add(FolderPath);
    	return pageNumber;
	}
	
	
	

	public void insertIntoPage(Hashtable<String,Object> htblColNameValue) throws FileNotFoundException, ClassNotFoundException, IOException {
         
          Page targetPage =null;
          Boolean checkForPageSize = false;
          
          // usedPagePath stores the path of the page that the row was inserted in it 
          String usedPagePath = "";
          Page UsedPage = null;
          

			String pagePath = TablePagesPath.get(TablePagesPath.size()-1);
			 targetPage = GetTargetPage(pagePath);
			if(targetPage.numberOfAvailableRows <  MaximumRowsCountinPage ){
				
				targetPage.numberOfAvailableRows++;
				checkForPageSize = true; // check that the page contains number of rows less than or equal 200
				usedPagePath = pagePath ; // save the path of the page that we will insert the new row in it
				UsedPage = targetPage; // save the page that we will insert into it the new row
				
			if(fTblColNameType.size() != htblColNameValue.size()){
				System.out.println("Insertion to table "+TableName+" failed due to incomplete inserted values");
			return;
			}
			}
			
		
	
		
		if(!checkForPageSize){
		
		
			
			int PageIndex =  CreateNewPage();
			String PagePath = TablePagesPath.get(PageIndex-1);
			
			usedPagePath = PagePath; // save the path of the page that we will insert the new row in it
			
			targetPage =  GetTargetPage(PagePath);
			targetPage.numberOfAvailableRows++;
		    UsedPage = targetPage ; // save the page that we will insert into it the new row
		    System.out.println("new Page Created");
		}
		
		DateFormat df = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
		Calendar calobj = Calendar.getInstance();
		htblColNameValue.put("Touch_Date", df.format(calobj.getTime()));
		
		boolean CheckIfExistFalse = true;
		htblColNameValue.put("Exists", CheckIfExistFalse);
		
		// insert into page
			targetPage.Rows.add(htblColNameValue);
			
			// insert into Btrees
		 
			Set<String> columnNamesForfTblColIndex =  fTblColIndexPath.keySet();
			Iterator<String> fTblColIndexIterator = columnNamesForfTblColIndex.iterator();
			
			while(fTblColIndexIterator.hasNext()){
				
				
				
				String indexedColumnName = fTblColIndexIterator.next();
				Object IndexedColumnKey = htblColNameValue.get(indexedColumnName);
				
				String TargetIndexedColumnBTreePath = fTblColIndexPath.get(indexedColumnName);
				BTree TargetIndexedColumnBTree =  GetIndexByDeSerialization(TargetIndexedColumnBTreePath);
				
				
				
				int tupleNumber = targetPage.numberOfAvailableRows + 200*(TablePagesPath.size()-1);
			    TargetIndexedColumnBTree.insert(Integer.parseInt(IndexedColumnKey+""),  tupleNumber);
			    System.out.println("here "+Integer.parseInt(IndexedColumnKey+"")+" "+tupleNumber);
			    //Serialization of Btree of the Target indexed column
			    
			    String filePath = WorkSpacePath+"/Classes/Hatem 31-4562 Omar 31-5039/"+this.TableName+"/"+indexedColumnName+"_index.class";
				 serializeBTree(filePath, TargetIndexedColumnBTree);
			    
				}
			
			
			
		    serializePage(usedPagePath, UsedPage);
		    
		System.out.println("One row inserted successfully to "+TableName+" table "+count++);
	}
	
	
     public Iterator getSatisfiedRowsIndex (Hashtable<String,Object> htblColNameValue,String strOperator) throws FileNotFoundException, ClassNotFoundException, IOException{
    	 ArrayList<Hashtable<String, Object>> returnedSatisfiedRows = new ArrayList<Hashtable<String,Object>>();
    	 ArrayList<Hashtable<String, Object>> returnedSatisfiedRowsFromIndexSearch = new ArrayList<Hashtable<String,Object>>();
    	 ArrayList<Integer> targetRowsIndex = new ArrayList<Integer>();
         Set<String> keys =  htblColNameValue.keySet();
         Iterator<String> iterator = keys.iterator();
          
         if(strOperator.equals("")){
        	 String columnName = iterator.next();
          	  Object columnValue = htblColNameValue.get(columnName);
        	 if(fTblColIndexPath.containsKey(columnName)){
        		 Hashtable<String,Object> returnedrowFromIndexedSearch = selectRowsUsingIndexedColumn(columnName, columnValue);
        	     Page newPage = new Page("");
        	     newPage.getRowsArrayList().add(returnedrowFromIndexedSearch);
        	     ArrayList<String> rowsToPrint  = newPage.getRows();
        	     Iterator<String> returnedIterator = rowsToPrint.iterator();
        	 }
         }
         
         
         while(iterator.hasNext()){
       	  String columnName = iterator.next();
       	  Object columnValue = htblColNameValue.get(columnName);
       	  if(fTblColIndexPath.containsKey(columnName)){
       		 Hashtable<String,Object> returnedrowFromIndexedSearch = selectRowsUsingIndexedColumn(columnName, columnValue);
       	     returnedSatisfiedRowsFromIndexSearch.add(returnedrowFromIndexedSearch);
       	  }else{
       		  
       	  }
       	  
         }
    	 
    	 
     }
	
	public Hashtable<String,Object> selectRowsUsingIndexedColumn (String ColumnName , Object columnValue) throws FileNotFoundException, ClassNotFoundException, IOException{
		
     	String BtreePath = fTblColIndexPath.get(ColumnName);
         BTree targetIndexedBtree = GetIndexByDeSerialization(BtreePath);

         int tupleNumber = (Integer) targetIndexedBtree.search(Integer.parseInt(columnValue+""));

         
         int pageNumber = tupleNumber/MaximumRowsCountinPage;
     	if(tupleNumber%MaximumRowsCountinPage !=0){
     		pageNumber++;
     	}
     	//System.out.println("page number = "+pageNumber);
     	//System.out.println("tuple number = "+tupleNumber);
     	//System.out.println("row number = "+ tupleNumber%MaximumRowsCountinPage);
     	
     	/*
     	 * get the target page that contains the returned tuple
     	 */
     	String targetPagePath = TablePagesPath.get(pageNumber-1);
     	Page targetPage = GetTargetPage(targetPagePath);
     	
     	/*
     	 * get   the target row
     	 */
     	  ArrayList<Hashtable<String, Object>> targetPageRows = targetPage.getRowsArrayList();
     	  Hashtable<String, Object> targetrow = targetPageRows.get(tupleNumber%MaximumRowsCountinPage);
     	  return targetrow;
     	
  
         
	}
	/*
	 * this method return a list of all rows that satisfy the conditon on an non indexed columns with 
	 * AND and OR operators
	 * 
	 */
	
	public ArrayList<Hashtable<String, Object>> SelectRowsUsingNonIndexedColumn (Hashtable<String,Object> htblColNameValue,String strOperator) throws FileNotFoundException, ClassNotFoundException, IOException{
		ArrayList<Hashtable<String, Object>> returnedRowsList = new ArrayList<Hashtable<String,Object>>();
		for(int i=0 ; i<TablePagesPath.size() ; i++){
 			String PagePath = TablePagesPath.get(i);
 			Page targetPage = GetTargetPage(PagePath);
 			
 		  ArrayList<Hashtable<String, Object>> returnedRowsFromApage = selectRowsfromPageByCondition(targetPage, htblColNameValue, strOperator);
 		
 			returnedRowsList.addAll(returnedRowsFromApage);
 			
 		}
		return returnedRowsList;
	}
	
	
	
	public Iterator SelectFromPages (Hashtable<String,Object> htblColNameValue,String strOperator) throws FileNotFoundException, ClassNotFoundException, IOException{
      
		ArrayList<String> ReturnedRowsfromSelcetedTable = new ArrayList<String>();
          Set<String> keys =  htblColNameValue.keySet();
          Iterator<String> iterator = keys.iterator();
          
          while(iterator.hasNext()){
        	  String ColumnName = iterator.next();
              
              /*
               * check if condition column is an index 
               */
              
             if(fTblColIndexPath.containsKey(ColumnName)){
            	 Object columnValue = htblColNameValue.get(ColumnName);
            	String BtreePath = fTblColIndexPath.get(ColumnName);
                BTree targetIndexedBtree = GetIndexByDeSerialization(BtreePath);

                int tupleNumber = (Integer) targetIndexedBtree.search(Integer.parseInt(columnValue+""));

                /*
                 * get page number 
                 */
                
                int pageNumber = tupleNumber/MaximumRowsCountinPage;
            	if(tupleNumber%MaximumRowsCountinPage !=0){
            		pageNumber++;
            	}
            	//System.out.println("page number = "+pageNumber);
            	//System.out.println("tuple number = "+tupleNumber);
            	//System.out.println("row number = "+ tupleNumber%MaximumRowsCountinPage);
            	
            	/*
            	 * get the target page that contains the returned tuple
            	 */
            	String targetPagePath = TablePagesPath.get(pageNumber-1);
            	Page targetPage = GetTargetPage(targetPagePath);
            	
            	/*
            	 * get Arraylist that contains the target row
            	 */
            	if(strOperator.equals("AND")||strOperator.equals("")){
            		ArrayList<String> targetRow = targetPage.getTargetRow(tupleNumber%MaximumRowsCountinPage);
                    Iterator<String> targetRowIterator = targetRow.iterator();
                    return targetRowIterator;
            	}
            	
             }else{
            	 /*
         		 * if column checked in the condition is not indexed
         		 */
                  
         		
         		for(int i=0 ; i<TablePagesPath.size() ; i++){
         			String PagePath = TablePagesPath.get(i);
         			Page targetPage = GetTargetPage(PagePath);
         			
         		//	ArrayList<String> resultRows = selectRowsfromPageByCondition(targetPage, htblColNameValue, strOperator);
         		
         			//ReturnedRowsfromSelcetedTable.addAll(resultRows);
         			
         		}
         		
         	
             }
          }
          
          
          
          
      	Iterator<String> returnedIterator = ReturnedRowsfromSelcetedTable.iterator();
 		return returnedIterator;

		
	}
	
	/**
	 * 
	 * select row from a page by condition
	 * 
	 * @param targetPage
	 * @param htblColNameValue
	 * @param strOperator
	 * @return
	 */
	
	
	public ArrayList<Hashtable<String , Object>> selectRowsfromPageByCondition (Page targetPage , Hashtable<String,Object> htblColNameValue,String strOperator){
		ArrayList<Hashtable<String, Object>> PageRows = targetPage.Rows;
		Page resultPage = new Page("result");
		ArrayList<Hashtable<String, Object>> resultedRowsList = new ArrayList<Hashtable<String,Object>>();
		
		// it is used to check that the row satisfy the condition or not by concatenating True and false
		
		 
		
		for(int i = 1 ; i< PageRows.size() ; i++){
			boolean checkForValidRowWhenUsingAND =true; 
			boolean checkForValidRowWhenUsingOR = false;
			Hashtable<String, Object> Row = PageRows.get(i);
			Set<String> ColumnNames = htblColNameValue.keySet();
			Iterator<String> htblColNameValueIterator = ColumnNames.iterator();
			
			while(htblColNameValueIterator.hasNext()){
				String ColumnName = htblColNameValueIterator.next();
				
				// to check for invalid columns that are not in the table we are selecting from
				if(!Row.containsKey(ColumnName)){
					System.out.println("Invalid Column Name");
				}
				
				// skip this row if its Exists is false which means that it was deleted 
			
				
				Object ConditionValue = htblColNameValue.get(ColumnName);
				Object ColumnValueForCurrentRow = Row.get(ColumnName);
				
				// to check that there is only one column in the conditions 
				
				if(htblColNameValue.size() == 1 && strOperator.isEmpty() && ConditionValue.equals(ColumnValueForCurrentRow)){
					if(!Row.get("Exists").equals(false)){
						resultedRowsList.add(Row);
					}
					
				}
				
				if((!ConditionValue.equals(ColumnValueForCurrentRow)) && strOperator.equals("AND")){
					checkForValidRowWhenUsingAND = false ;
					
					break;
				}else{
					if((ConditionValue.equals(ColumnValueForCurrentRow)) && strOperator.equals("OR")){
						checkForValidRowWhenUsingOR = true;
					  
						break;
					}
				}
				//System.out.println(ConditionValue +"    "+ColumnValueForCurrentRow + checkForValidRowWhenUsingAND);
			}
			if(Row.get("Exists").equals(false)){
				continue;
			}
			
			if(checkForValidRowWhenUsingAND == true && strOperator.equals("AND")){
			
				resultedRowsList.add(Row);
			}
			
				if(checkForValidRowWhenUsingOR == true && strOperator.equals("OR")){
					resultedRowsList.add(Row);
				}
				
			
			
		}
		//  get the rows in the resultPage in the form of arraylist of strings
		
		

		return resultedRowsList;
	}

	public void UpdatePagesWithTheTargetRow (Object strKey, Hashtable<String,Object> htblColNameValue) throws FileNotFoundException, ClassNotFoundException, IOException{
		for(int i = 0 ; i<TablePagesPath.size(); i++){
			String path = TablePagesPath.get(i);
			Page TargetPage = GetTargetPage(path);
			
			Hashtable<String, Object> htblCondtionColNameValue = new Hashtable<String,Object>();
			htblCondtionColNameValue.put(Key, strKey);
			
			// an empty String is passed to the strOperator parameter because we are checking on only on column 
			
			ArrayList<Integer> RowsIndexArray = CheckAvailableConditionRowInPage(TargetPage, htblCondtionColNameValue , "");
		
			// check that the row exsist in TargetPage 
			if(RowsIndexArray != null){
				for( int j= 0 ; j<RowsIndexArray.size() ; j++) {
			Hashtable<String, Object> TargetRow  = TargetPage.Rows.get((int)RowsIndexArray.get(j));
			Set<String> keys = htblColNameValue.keySet();
			Iterator<String> ColumnIterator = keys.iterator();
			
			while(ColumnIterator.hasNext()){
				String ColumnName = ColumnIterator.next();
				Object newColumnValue = htblColNameValue.get(ColumnName);
				
				TargetRow.replace(ColumnName, newColumnValue);
				
				DateFormat df = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
				Calendar calobj = Calendar.getInstance();
				TargetRow.replace("Touch_Date", df.format(calobj.getTime()));
				
			}
			System.out.println("One Row Affected");
			serializePage(path, TargetPage);
			return;
				}
			}
		
					}
		
		System.out.println("Zero Rows Affected");
	}
	
	 
	public void DeleteTargetRowFromPage ( Hashtable<String,Object> htblColNameValue, String strOperator) throws FileNotFoundException, ClassNotFoundException, IOException{

		
	        
		
		
		boolean deletedRows =false;
		for(int i = 0 ; i<TablePagesPath.size(); i++){
			String path = TablePagesPath.get(i);
			Page TargetPage = GetTargetPage(path);
			
	    ArrayList<Integer> RowsIndexArray = CheckAvailableConditionRowInPage(TargetPage, htblColNameValue , strOperator);
		
			// check that the row exsist in TargetPage 
			if(RowsIndexArray.size() !=0){
				for(int j =0 ; j<RowsIndexArray.size() ; j++){
				Hashtable<String, Object> TargetRow  = TargetPage.Rows.get((int)RowsIndexArray.get(j));
				TargetRow.replace("Exists", false);
				
				System.out.println("One Row Affected");
				deletedRows = true;
				serializePage(path, TargetPage);
				
				}
			}
			
		}
		if(deletedRows == false ){
		System.out.println("Zero Rows Affected");
		}
	}
	
	
	// CheckAvailableConditionRowInPage method will check that the target row exsist in the page or not
	// if it doesnot exsist it will return -1 otherwise it will return the index of the rows in the page 
	
	public ArrayList<Integer> CheckAvailableConditionRowInPage (Page TargetPage , Hashtable<String, Object> htblCondtionColNameValue , String strOperator){
		
		ArrayList<Hashtable<String, Object>> TargetPageRows = TargetPage.Rows;
		
		ArrayList<Integer> RowsIndexArray = new ArrayList<Integer>();
		
		
		
		for(int i = 1 ; i<TargetPageRows.size(); i++){
			
			Set<String> ColumnsName = htblCondtionColNameValue.keySet();
			Iterator<String> ColumnsIterator = ColumnsName.iterator();
			
			boolean checkForValidRowWhenUsingAND =true; 
			boolean checkForValidRowWhenUsingOR = false;
			
			while(ColumnsIterator.hasNext()){
				String CondtioncolumnName = ColumnsIterator.next();
				
				
				Object ConditionColumnValue = htblCondtionColNameValue.get(CondtioncolumnName);
			
			
			if(!TargetPageRows.get(i).containsKey(CondtioncolumnName)){
				System.out.println("invalid Checking Columns");
				return RowsIndexArray ;
			}
			
			Object ColumnValueForCurrentRow = TargetPageRows.get(i).get(CondtioncolumnName);
			
			
			
			if(htblCondtionColNameValue.size() == 1 && strOperator.isEmpty() && ConditionColumnValue.equals(ColumnValueForCurrentRow) && TargetPageRows.get(i).get("Exists").equals(true)){
			RowsIndexArray.add((Integer)i);
			return RowsIndexArray;
			}
			
			if((!ConditionColumnValue.equals(ColumnValueForCurrentRow)) && strOperator.equals("AND") && TargetPageRows.get(i).get("Exists").equals(true)){
				
				checkForValidRowWhenUsingAND = false ;
				
				break;
			}else{
				if((ConditionColumnValue.equals(ColumnValueForCurrentRow)) && strOperator.equals("OR") && TargetPageRows.get(i).get("Exists").equals(true)){
					checkForValidRowWhenUsingOR = true;
				  
					break;
				}
			}
		
			
			
		}
			if(checkForValidRowWhenUsingAND == true && strOperator.equals("AND")){
				
				RowsIndexArray.add((Integer) i );
				}
				
					if(checkForValidRowWhenUsingOR == true && strOperator.equals("OR")){
						RowsIndexArray.add((Integer) i );
					}
					
		}
		return RowsIndexArray ; 
	}
	
	
	 public void createIndex (String strColName) throws IOException{
		 BTree columnBTreeIndex = new BTree();
		 
		 String filePath = WorkSpacePath+"/Classes/Hatem 31-4562 Omar 31-5039/"+this.TableName+"/"+strColName+"_index.class";
		 fTblColIndexPath.put(strColName, filePath);
		 
		 serializeBTree(filePath, columnBTreeIndex);
	 }
	 
	 public BTree GetIndexByDeSerialization (String PagePath) throws FileNotFoundException, IOException, ClassNotFoundException {
			
		 ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(PagePath)));
	        BTree btree = (BTree)ois.readObject();
	        ois.close();
	        return btree;
	}
	 
	 public void serializeBTree(String filePath , BTree columnBTreeIndex ) throws FileNotFoundException, IOException{
			ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File(filePath)));
	   		oos.writeObject(columnBTreeIndex);
	   		oos.flush();
	    	oos.close();
		}
		
	
	 
	
	public void serializePage(String filePath , Page page ) throws FileNotFoundException, IOException{
		ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File(filePath)));
   		oos.writeObject(page);
   		oos.flush();
    	oos.close();
	}
	
	public Page GetTargetPage (String PagePath) throws FileNotFoundException, IOException, ClassNotFoundException {
		
		 ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(PagePath)));
	        Page TargetPage = (Page)ois.readObject();
	        ois.close();
	        return TargetPage;
	}
	
	public static void main(String[] args) throws FileNotFoundException, IOException {

        
	}
	
}
